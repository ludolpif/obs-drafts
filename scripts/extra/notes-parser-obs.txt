
effect-parser.c: ep_parse_pass_command() 
       if (cf_token_is(&ep->cfp, "vertex_shader") ||
            cf_token_is(&ep->cfp, "vertex_program")) {
                call = &pass->vertex_program.da;

        } else if (cf_token_is(&ep->cfp, "pixel_shader") ||
                   cf_token_is(&ep->cfp, "pixel_program")) {
                call = &pass->fragment_program.da;


technique name { 
   pass [name] { 
     vertex_shader ...
   }
}



ep_parse_func_param()
in, inout, out, uniform

ep_get_var_specifiers() appelÃ© uniqument dans ep_parse_other()
property
const
uniform

ep_parse_other()
                report_invalid_func_keyword(ep, "property", is_property);
                report_invalid_func_keyword(ep, "const", is_const);
                report_invalid_func_keyword(ep, "uniform", is_uniform);


static void debug_get_default_value(struct gs_effect_param *param, char *buffer,

        case GS_SHADER_PARAM_MATRIX4X4:
                snprintf(buffer, buf_size,
                         "[[%e,%e,%e,%e],[%e,%e,%e,%e],"
                         "[%e,%e,%e,%e],[%e,%e,%e,%e]]",




#if defined(_DEBUG) && defined(_DEBUG_SHADERS)
        blog(LOG_DEBUG,
             "================================================================================");
        blog(LOG_DEBUG, "Effect Parser reformatted shader '%s' to:", file);
        debug_print_string("\t", ep->cfp.lex.reformatted);
#endif


gl-shaderparser.h
/*
 *   Parses shaders into GLSL.  Shaders are almost identical to HLSL
 * model 5 so it requires quite a bit of tweaking to convert correctly.
 * Takes the parsed shader data, and builds a GLSL string out of it.
 */

gl-shaderparser.c
/*
 * NOTE: HLSL-> GLSL intrinsic conversions
 *   atan2    -> atan
 *   clip     -> (unsupported)
 *   ddx      -> dFdx
 *   ddy      -> dFdy
 *   fmod     -> mod (XXX: these are different if sign is negative)
 *   frac     -> fract
 *   lerp     -> mix
 *   lit      -> (unsupported)
 *   log10    -> (unsupported)
 *   mul      -> (change to operator)
 *   rsqrt    -> inversesqrt
 *   saturate -> (use clamp)
 *   sincos   -> (map to manual sin/cos calls)
 *   tex*     -> texture
 *   tex*grad -> textureGrad
 *   tex*lod  -> textureLod
 *   tex*bias -> (use optional 'bias' value)
 *   tex*proj -> textureProj
 *
 *   All else can be left as-is
 */

gl_shader_buildstring()
        dstr_copy(&glsp->gl_string, "#version 330\n\n");
        dstr_cat(&glsp->gl_string, "const bool obs_glsl_compile = true;\n\n");
...
vec4 obs_load_2d(sampler2D s, ivec3 p_lod)
{
	int lod = p_lod.z;
	vec2 size = textureSize(s, lod);
	vec2 p = (vec2(p_lod.xy) + 0.5) / size;
	vec4 color = textureLod(s, p, lod);
	return color;
}


 gl_write_texture_code()

        if (cf_token_is(cfp, "Sample")) {
                written = gl_write_texture_call(glsp, var, "texture", true);
        } else if (cf_token_is(cfp, "SampleBias")) {
                written = gl_write_texture_call(glsp, var, "texture", true);
        } else if (cf_token_is(cfp, "SampleGrad")) {
                written = gl_write_texture_call(glsp, var, "textureGrad", true);
        } else if (cf_token_is(cfp, "SampleLevel")) {
                written = gl_write_texture_call(glsp, var, "textureLod", true);
        } else if (cf_token_is(cfp, "Load")) {
                const char *const func = (strcmp(var->type, "texture3d") == 0)
                                                 ? "obs_load_3d"
                                                 : "obs_load_2d";
                written = gl_write_texture_call(glsp, var, func, false);
        }

